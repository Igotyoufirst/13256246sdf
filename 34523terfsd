-- UI Library Module

local HttpService = game:GetService("HttpService")

local UI = {}
UI.__index = UI

-- Load your custom font once (reuse 'font' variable)
local font = nil
do
    writefile("smallest_pixel.ttf", game:HttpGet("https://github.com/f1nobe7650/Nebula/raw/refs/heads/main/fs-tahoma-8px.ttf"))
    local smallest_pixel = {
        name = "SmallestPixel7",
        faces = {{
            name = "Regular",
            weight = Enum.FontWeight.Light,
            style = Enum.FontStyle.Normal,
            assetId = getcustomasset("smallest_pixel.ttf")
        }}
    }
    writefile("fontface.font", HttpService:JSONEncode(smallest_pixel))
    font = Font.new(getcustomasset("fontface.font"), Enum.FontWeight.Light)
end


local function createFrame(parent, props)
    local frame = Instance.new("Frame")
    frame.AnchorPoint = props.AnchorPoint or Vector2.new(0, 0)
    frame.BackgroundColor3 = props.BackgroundColor3 or Color3.new(1,1,1)
    frame.BackgroundTransparency = props.BackgroundTransparency or 0
    frame.BorderSizePixel = props.BorderSizePixel or 0
    frame.BorderColor3 = props.BorderColor3 or Color3.new(0, 0, 0)
    frame.Position = props.Position or UDim2.new(0, 0, 0, 0)
    frame.Size = props.Size or UDim2.new(1, 0, 1, 0)
    frame.Name = props.Name or "Frame"
    frame.Parent = parent
    return frame
end

local function createTextLabel(parent, props)
    local label = Instance.new("TextLabel")
    label.BackgroundColor3 = props.BackgroundColor3 or Color3.new(1, 1, 1)
    label.BackgroundTransparency = props.BackgroundTransparency or 1
    label.BorderSizePixel = props.BorderSizePixel or 0
    label.BorderColor3 = props.BorderColor3 or Color3.new(0, 0, 0)
    label.Size = props.Size or UDim2.new(0, 100, 0, 20)
    label.Position = props.Position or UDim2.new(0, 0, 0, 0)
    label.FontFace = props.FontFace or font
    label.TextColor3 = props.TextColor3 or Color3.new(0,0,0)
    label.Text = props.Text or ""
    label.Name = props.Name or "TextLabel"
    label.TextSize = props.TextSize or 14
    label.TextStrokeTransparency = props.TextStrokeTransparency or 1
    label.TextXAlignment = props.TextXAlignment or Enum.TextXAlignment.Left
    label.TextYAlignment = props.TextYAlignment or Enum.TextYAlignment.Center
    label.ZIndex = props.ZIndex or 1
    label.Parent = parent
    return label
end


-- Creates a toggle UI element (frame with a checkbox and label)
function UI:CreateToggle(name, initialValue, callback)
    -- Container frame for toggle
    local toggleHolder = createFrame(self.Holder, {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Name = name .. "ToggleHolder"
    })

    -- The toggle box background (untoggled style)
    local toggleBox = createFrame(toggleHolder, {
        BackgroundColor3 = Color3.fromRGB(44, 44, 44),
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 5, 0, 2),
        Name = "ToggleBox"
    })

    local toggleBoxGradient = Instance.new("UIGradient", toggleBox)
    toggleBoxGradient.Rotation = -90
    toggleBoxGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174, 174, 174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }

    -- The toggled indicator frame (initially visible or hidden)
    local toggledIndicator = createFrame(toggleBox, {
        BackgroundColor3 = Color3.fromRGB(59, 59, 95),
        Size = UDim2.new(1, 0, 1, 0),
        Name = "ToggledIndicator"
    })

    local toggledIndicatorGradient = Instance.new("UIGradient", toggledIndicator)
    toggledIndicatorGradient.Rotation = -90
    toggledIndicatorGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174, 174, 174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }

    toggledIndicator.Visible = initialValue

    -- Label for the toggle
    local toggleLabel = createTextLabel(toggleHolder, {
        Text = name,
        Position = UDim2.new(0, 26, 0, 0),
        Size = UDim2.new(1, -26, 1, 0),
        TextColor3 = Color3.fromRGB(140, 140, 140),
        FontFace = font,
        TextSize = 14,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Name = "ToggleLabel"
    })

    local toggledInfo = createTextLabel(toggleHolder, {
        Text = initialValue and "toggled on" or "toggled off",
        Position = UDim2.new(1, 5, 0, 0),
        Size = UDim2.new(0, 80, 1, 0),
        TextColor3 = Color3.fromRGB(140, 140, 140),
        FontFace = font,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Right,
        BackgroundTransparency = 1,
        Name = "ToggledInfo"
    })

    -- Toggle state
    local toggled = initialValue

    local function updateUI(state)
        toggledIndicator.Visible = state
        toggledInfo.Text = state and "toggled on" or "toggled off"
        if callback then
            pcall(callback, state)
        end
    end

    toggleBox.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            updateUI(toggled)
        end
    end)
    toggleLabel.InputBegan = toggleBox.InputBegan -- Let label respond or you can add a similar listener for label if you want it clickable


    return {
        Set = function(_, state)
            toggled = state
            updateUI(toggled)
        end,
        Get = function()
            return toggled
        end,
        Toggle = function()
            toggled = not toggled
            updateUI(toggled)
        end,
        Destroy = function()
            toggleHolder:Destroy()
        end
    }
end


-- Initializes the UI root frame and necessary components
function UI.new()
    local self = setmetatable({}, UI)

    local ragebot = Instance.new("ScreenGui")
    ragebot.Name = "ragebot"
    ragebot.ResetOnSpawn = false
    ragebot.Parent = game:GetService("CoreGui")

    local MainAccent = createFrame(ragebot, {
        Name = "Main accent",
        BorderSizePixel = 0,
        BackgroundColor3 = Color3.fromRGB(59, 59, 95),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 201, 0, 135)
    })

    Instance.new("UIStroke", MainAccent)

    local secondMain = createFrame(MainAccent, {
        Name = "secondmain",
        BorderSizePixel = 0,
        BackgroundColor3 = Color3.fromRGB(27, 27, 27),
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1)
    })

    local boxMain = createFrame(secondMain, {
        Name = "box main",
        BorderSizePixel = 0,
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        Size = UDim2.new(1, -8, 1, -24),
        Position = UDim2.new(0, 4, 0, 20)
    })

    local boxMain_UIStroke = Instance.new("UIStroke", boxMain)
    boxMain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local secondboxmain = createFrame(boxMain, {
        Name = "second box main",
        BackgroundColor3 = Color3.fromRGB(23, 23, 23),
        Size = UDim2.new(1, -10, 1, -10),
        Position = UDim2.new(0, 5, 0, 5)
    })

    local secondboxmain_UIStroke = Instance.new("UIStroke", secondboxmain)
    secondboxmain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local holder = createFrame(secondboxmain, {
        Name = "holder",
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Size = UDim2.new(1, -8, 1, -8),
        Position = UDim2.new(0, 4, 0, 4)
    })

    local holder_UIStroke = Instance.new("UIStroke", holder)
    holder_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local accentstripe = createFrame(holder, {
        Name = "accent stripe",
        BackgroundColor3 = Color3.fromRGB(74, 84, 122),
        Size = UDim2.new(1, -2, 0, 2),
        Position = UDim2.new(0, 1, 0, 1)
    })

    local holder_UIGradient = Instance.new("UIGradient", holder)
    holder_UIGradient.Rotation = -90
    holder_UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(103, 103, 103)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }

    -- Title label
    local Title = createTextLabel(holder, {
        Name = "Title",
        Text = "biteme.club",
        Position = UDim2.new(0, -8, 0, -45),
        Size = UDim2.new(0, 200, 0, 50),
        TextColor3 = Color3.fromRGB(140, 140, 140),
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        FontFace = font
    })

    -- Main holder for toggles etc.
    local mainHolder = createFrame(holder, {
        Name = "Holder",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })

    -- List layout for tidy stacking of toggles
    local uiLayout = Instance.new("UIListLayout", mainHolder)
    uiLayout.Padding = UDim.new(0, 6)
    uiLayout.SortOrder = Enum.SortOrder.LayoutOrder

    self.Ragebot = ragebot
    self.MainAccent = MainAccent
    self.Holder = mainHolder

    return self
end


return UI
