local RagebotUI = {}
RagebotUI.__index = RagebotUI

-- Load Font Utility
local function loadFont()
    if not isfile("smallest_pixel.ttf") then
        local success, msg = pcall(function()
            writefile("smallest_pixel.ttf", game:HttpGet("https://github.com/Igotyoufirst/proggyclean/raw/refs/heads/main/ProggyClean.ttf"))
        end)
        if not success then
            warn("Failed to download font: " .. tostring(msg))
            return Enum.Font.SourceSans -- fallback
        end
    end

    local smallest_pixel_obj = {
        name = "SmallestPixel7",
        faces = {
            {
                name = "Regular",
                weight = Enum.FontWeight.Light,
                style = Enum.FontStyle.Normal,
                assetId = getcustomasset("smallest_pixel.ttf")
            }
        }
    }

    writefile("fontface.font", game:GetService("HttpService"):JSONEncode(smallest_pixel_obj))

    return Font.new(getcustomasset("fontface.font"), Enum.FontWeight.Light)
end

-- Constructor
function RagebotUI.new()
    local self = setmetatable({}, RagebotUI)

    self.font = loadFont()

    -- Create main ScreenGui
    local ragebot = Instance.new("ScreenGui")
    ragebot.Name = "ragebot"
    ragebot.ResetOnSpawn = false

    -- Main Accent Frame
    local MainAccent = Instance.new("Frame", ragebot)
    MainAccent.Name = "Main accent"
    MainAccent.BorderSizePixel = 0
    MainAccent.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
    MainAccent.AnchorPoint = Vector2.new(0.5, 0.5)
    MainAccent.Size = UDim2.new(0, 201, 0, 140)
    MainAccent.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainAccent.BorderColor3 = Color3.fromRGB(0, 0, 0)

    local MainAccent_UIStroke = Instance.new("UIStroke", MainAccent)

    -- secondmain Frame
    local secondmain = Instance.new("Frame", MainAccent)
    secondmain.Name = "secondmain"
    secondmain.BorderSizePixel = 0
    secondmain.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
    secondmain.Size = UDim2.new(1, -2, 1, -2)
    secondmain.Position = UDim2.new(0, 1, 0, 1)
    secondmain.BorderColor3 = Color3.fromRGB(0, 0, 0)

    -- boxmain
    local boxmain = Instance.new("Frame", secondmain)
    boxmain.Name = "box main"
    boxmain.BorderSizePixel = 0
    boxmain.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    boxmain.Size = UDim2.new(1, -8, 1, -24)
    boxmain.Position = UDim2.new(0, 4, 0, 20)
    boxmain.BorderColor3 = Color3.fromRGB(0, 0, 0)

    local boxmain_UIStroke = Instance.new("UIStroke", boxmain)
    boxmain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    -- secondboxmain
    local secondboxmain = Instance.new("Frame", boxmain)
    secondboxmain.Name = "second box main"
    secondboxmain.BorderSizePixel = 0
    secondboxmain.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
    secondboxmain.Size = UDim2.new(1, -10, 1, -10)
    secondboxmain.Position = UDim2.new(0, 5, 0, 5)
    secondboxmain.BorderColor3 = Color3.fromRGB(0, 0, 0)

    local secondboxmain_UIStroke = Instance.new("UIStroke", secondboxmain)
    secondboxmain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    -- holder
    local holder = Instance.new("Frame", secondboxmain)
    holder.Name = "holder"
    holder.BorderSizePixel = 0
    holder.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    holder.Size = UDim2.new(1, -8, 1, -8)
    holder.Position = UDim2.new(0, 4, 0, 4)
    holder.BorderColor3 = Color3.fromRGB(0, 0, 0)

    local holder_UIStroke = Instance.new("UIStroke", holder)
    holder_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local holder_UIGradient = Instance.new("UIGradient", holder)
    holder_UIGradient.Rotation = -90
    holder_UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(103, 103, 103)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }

    -- Title label
    local Title = Instance.new("TextLabel", holder)
    Title.Name = "Title"
    Title.Text = "biteme.club"
    Title.TextSize = 12
    Title.FontFace = self.font
    Title.TextColor3 = Color3.fromRGB(140, 140, 140)
    Title.BackgroundTransparency = 1
    Title.TextStrokeTransparency = 0
    Title.BorderSizePixel = 0
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Title.Size = UDim2.new(1, 0, 0, 18)
    Title.Position = UDim2.new(0, 0, 0, -22)

    -- Holder frame (container for toggles/sliders)
    local Holder = Instance.new("Frame", holder)
    Holder.Name = "Holder"
    Holder.BorderSizePixel = 0
    Holder.BackgroundTransparency = 1
    Holder.Size = UDim2.new(1, 0, 1, 0)
    Holder.Position = UDim2.new(0, 0, 0, 0)

    -- UIListLayout inside Holder
    local UILayout = Instance.new("UIListLayout", Holder)
    UILayout.Padding = UDim.new(0, 8)
    UILayout.SortOrder = Enum.SortOrder.LayoutOrder

    self.GUI = ragebot
    self.MainAccent = MainAccent
    self.holder = Holder
    self.items = {} -- store toggles and sliders here

    return self
end

-- Helper function: create a TextLabel with basic properties
local function newLabel(text, fontFace, textColor, textSize, size)
    local label = Instance.new("TextLabel")
    label.BackgroundTransparency = 1
    label.Text = text or ""
    label.FontFace = fontFace
    label.TextColor3 = textColor or Color3.fromRGB(140, 140, 140)
    label.TextSize = textSize or 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Size = size or UDim2.new(0, 150, 0, 14)
    label.BorderSizePixel = 0
    label.TextStrokeTransparency = 1
    return label
end

-- Create Toggle UI component
function RagebotUI:CreateToggle(labelText, initialState, callback)
    assert(type(labelText) == "string", "labelText must be a string")
    assert(type(initialState) == "boolean", "initialState must be a boolean")
    assert(type(callback) == "function" or callback == nil, "callback must be a function or nil")

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 24)
    toggleFrame.BackgroundTransparency = 1

    -- Label
    local label = newLabel(labelText, self.font, Color3.fromRGB(200, 200, 200), 14, UDim2.new(1, -40, 1, 0))
    label.Parent = toggleFrame
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Position = UDim2.new(0, 4, 0, 0)

    -- Toggle button frame
    local toggleBtn = Instance.new("Frame")
    toggleBtn.Name = "ToggleBtn"
    toggleBtn.Size = UDim2.new(0, 28, 0, 16)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
    toggleBtn.Position = UDim2.new(1, -34, 0, 4)
    toggleBtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
    toggleBtn.Parent = toggleFrame
    toggleBtn.ClipsDescendants = true
    toggleBtn.SelectionImageObject = nil

    local uiStroke = Instance.new("UIStroke", toggleBtn)
    uiStroke.Color = Color3.fromRGB(59, 59, 95)

    local toggleCircle = Instance.new("Frame")
    toggleCircle.Name = "Circle"
    toggleCircle.Size = UDim2.new(0, 12, 0, 12)
    toggleCircle.Position = initialState and UDim2.new(1, -14, 0, 2) or UDim2.new(0, 2, 0, 2)
    toggleCircle.BackgroundColor3 = initialState and Color3.fromRGB(59, 59, 95) or Color3.fromRGB(85, 85, 85)
    toggleCircle.BorderSizePixel = 0
    toggleCircle.AnchorPoint = Vector2.new(0, 0)
    toggleCircle.Parent = toggleBtn
    toggleCircle.ZIndex = 2
    toggleCircle.Visible = true
    toggleCircle.ClipsDescendants = false
    toggleCircle:SetAttribute("toggled", initialState)

    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(1,0)
    uicorner.Parent = toggleCircle

    -- Click handler
    toggleBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local toggled = toggleCircle:GetAttribute("toggled")
            toggled = not toggled
            toggleCircle:SetAttribute("toggled", toggled)
            
            if toggled then
                toggleCircle.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
                toggleCircle:TweenPosition(UDim2.new(1, -14, 0, 2), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
            else
                toggleCircle.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
                toggleCircle:TweenPosition(UDim2.new(0, 2, 0, 2), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
            end

            if callback then
                callback(toggled)
            end
        end
    end)

    self.holder.Size = self.holder.Size + UDim2.new(0, 0, 0, 24)
    toggleFrame.Parent = self.holder

    local item = {
        Frame = toggleFrame,
        Enabled = initialState,
        Set = function(self, state)
            state = not not state
            toggleCircle:SetAttribute("toggled", state)
            if state then
                toggleCircle.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
                toggleCircle.Position = UDim2.new(1, -14, 0, 2)
            else
                toggleCircle.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
                toggleCircle.Position = UDim2.new(0, 2, 0, 2)
            end
            self.Enabled = state
        end,
        Get = function(self) 
            return toggleCircle:GetAttribute("toggled") 
        end,
        ToggleCallback = callback,
    }

    table.insert(self.items, item)
    return item
end

-- Create Slider UI component
function RagebotUI:CreateSlider(labelText, min, max, initialValue, callback)
    assert(type(labelText) == "string", "labelText must be a string")
    assert(type(min) == "number", "min must be a number")
    assert(type(max) == "number", "max must be a number")
    assert(type(initialValue) == "number", "initialValue must be a number")
    assert(type(callback) == "function" or callback == nil, "callback must be a function or nil")
    assert(min < max, "min must be less than max")

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 28)
    sliderFrame.BackgroundTransparency = 1

    -- Label
    local label = newLabel(labelText, self.font, Color3.fromRGB(200,200,200), 14, UDim2.new(1, -60, 0, 14))
    label.Parent = sliderFrame
    label.Position = UDim2.new(0, 4, 0, 2)
    label.TextXAlignment = Enum.TextXAlignment.Left

    -- Value Text
    local valueText = Instance.new("TextLabel")
    valueText.Name = "ValueText"
    valueText.BackgroundTransparency = 1
    valueText.FontFace = self.font
    valueText.TextColor3 = Color3.fromRGB(140, 140, 140)
    valueText.TextSize = 14
    valueText.Size = UDim2.new(0, 50, 0, 14)
    valueText.Position = UDim2.new(1, -52, 0, 2)
    valueText.TextXAlignment = Enum.TextXAlignment.Right
    valueText.Text = tostring(math.floor(initialValue * 100) / 100)
    valueText.Parent = sliderFrame

    -- Slider Bar Background
    local sliderBarBg = Instance.new("Frame")
    sliderBarBg.Name = "SliderBarBg"
    sliderBarBg.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
    sliderBarBg.BorderColor3 = Color3.fromRGB(0,0,0)
    sliderBarBg.Size = UDim2.new(1, -60, 0, 6)
    sliderBarBg.Position = UDim2.new(0, 4, 0, 22)
    sliderBarBg.Parent = sliderFrame

    local bgGradient = Instance.new("UIGradient", sliderBarBg)
    bgGradient.Rotation = -90
    bgGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174,174,174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    }

    -- Slider Fill
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
    sliderFill.BorderColor3 = Color3.fromRGB(0,0,0)
    sliderFill.Size = UDim2.new((initialValue - min)/(max - min), 0, 1, 0)
    sliderFill.Parent = sliderBarBg

    local fillGradient = Instance.new("UIGradient", sliderFill)
    fillGradient.Rotation = -90
    fillGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174,174,174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    }

    -- Slider knob (circle)
    local knob = Instance.new("Frame")
    knob.Name = "Knob"
    knob.Size = UDim2.new(0, 14, 0, 14)
    knob.Position = UDim2.new((initialValue - min)/(max - min), -7, 0, -4)
    knob.BackgroundColor3 = Color3.fromRGB(59,59,95)
    knob.BorderColor3 = Color3.fromRGB(0,0,0)
    knob.Parent = sliderBarBg

    local knobCorner = Instance.new("UICorner", knob)
    knobCorner.CornerRadius = UDim.new(1, 0)

    -- Values tracking
    local dragging = false
    local userInputService = game:GetService("UserInputService")

    local function updateValue(inputPosX)
        local absolutePos = sliderBarBg.AbsolutePosition.X
        local relativePos = math.clamp(inputPosX - absolutePos, 0, sliderBarBg.AbsoluteSize.X)
        local valuePercent = relativePos / sliderBarBg.AbsoluteSize.X
        local value = min + (max - min) * valuePercent
        
        -- Round to 2 decimals
        value = math.floor(value * 100)/100
        
        sliderFill.Size = UDim2.new(valuePercent, 0, 1, 0)
        knob.Position = UDim2.new(valuePercent, -7, 0, -4)
        valueText.Text = tostring(value)

        if callback then
            callback(value)
        end

        return value
    end

    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    knob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    userInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValue(input.Position.X)
        end
    end)

    -- Clicking on the bar to set position
    sliderBarBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateValue(input.Position.X)
            dragging = true
        end
    end)

    userInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    self.holder.Size = self.holder.Size + UDim2.new(0, 0, 0, 28)
    sliderFrame.Parent = self.holder

    local item = {
        Frame = sliderFrame,
        Min = min,
        Max = max,
        Value = initialValue,
        SetValue = function(self, val)
            val = math.clamp(val, self.Min, self.Max)
            local percent = (val - self.Min) / (self.Max - self.Min)
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            knob.Position = UDim2.new(percent, -7, 0, -4)
            valueText.Text = tostring(val)
            self.Value = val
            if callback then callback(val) end
        end,
        GetValue = function(self)
            return self.Value
        end,
        UpdateCallback = callback,
    }

    return item
end

return RagebotUI
