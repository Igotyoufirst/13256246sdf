local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

local ui = {}

-- Load font (simplified for demo)
function ui.loadFont(fontUrl)
    if not fontUrl then return nil end
    local fontPath = "smallest_pixel.ttf"
    local fontFacePath = "fontface.font"

    if not pcall(function() return readfile(fontPath) end) then
        writefile(fontPath, game:HttpGet(fontUrl))
    end

    local fontData = {
        name = "SmallestPixel7",
        faces = {
            {
                name = "Regular",
                weight = Enum.FontWeight.Regular.Value,
                style = Enum.FontStyle.Normal.Name,
                assetId = getcustomasset(fontPath)
            }
        }
    }

    if not pcall(function() return readfile(fontFacePath) end) then
        writefile(fontFacePath, HttpService:JSONEncode(fontData))
    end

    local success, font = pcall(function()
        return Font.new(getcustomasset(fontFacePath), Enum.FontWeight.Regular)
    end)

    if success then
        return font
    else
        return Enum.Font.SourceSans -- fallback
    end
end

-- Create base UI and returns menu object
function ui.createUI(font)
    local menu = {}
    menu.font = font or Enum.Font.SourceSans

    -- Create main GUI container
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "RageUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game:GetService("CoreGui")

    local mainFrame = Instance.new("Frame", screenGui)
    mainFrame.Name = "MainFrame"
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0

    local uiList = Instance.new("UIListLayout", mainFrame)
    uiList.Padding = UDim.new(0, 6)
    uiList.SortOrder = Enum.SortOrder.LayoutOrder

    menu.gui = screenGui
    menu.holder = mainFrame

    -- Helper to create toggles
    function menu:CreateToggle(name, default, callback)
        local frame = Instance.new("Frame", self.holder)
        frame.Name = "ToggleHolder"
        frame.Size = UDim2.new(1, -20, 0, 25)
        frame.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", frame)
        label.Name = "Label"
        label.Size = UDim2.new(0.8, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.Font = self.font
        label.Text = name or "Toggle"
        label.TextColor3 = Color3.fromRGB(200, 200, 200)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Position = UDim2.new(0, 5, 0, 0)

        local toggleBtn = Instance.new("TextButton", frame)
        toggleBtn.Name = "ToggleButton"
        toggleBtn.Size = UDim2.new(0, 40, 0, 20)
        toggleBtn.Position = UDim2.new(0.85, 0, 0, 2.5)
        toggleBtn.Text = default and "On" or "Off"
        toggleBtn.Font = self.font
        toggleBtn.TextColor3 = Color3.fromRGB(255,255,255)
        toggleBtn.TextSize = 14
        toggleBtn.BackgroundColor3 = default and Color3.fromRGB(59, 59, 95) or Color3.fromRGB(70, 70, 70)
        toggleBtn.BorderSizePixel = 0
        toggleBtn.AutoButtonColor = true

        local toggled = default and true or false

        local function updateToggle(state)
            toggled = state
            toggleBtn.Text = toggled and "On" or "Off"
            toggleBtn.BackgroundColor3 = toggled and Color3.fromRGB(59, 59, 95) or Color3.fromRGB(70, 70, 70)
            if callback then
                pcall(callback, toggled)
            end
        end

        toggleBtn.MouseButton1Click:Connect(function()
            updateToggle(not toggled)
        end)

        return frame, updateToggle
    end

    -- Helper to create sliders
    function menu:CreateSlider(name, minValue, maxValue, initialValue, callback)
        local frame = Instance.new("Frame", self.holder)
        frame.Name = "SliderHolder"
        frame.Size = UDim2.new(1, -20, 0, 40)
        frame.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", frame)
        label.Name = "Label"
        label.Size = UDim2.new(0.5, 0, 0.5, 0)
        label.BackgroundTransparency = 1
        label.Font = self.font
        label.Text = name or "Slider"
        label.TextColor3 = Color3.fromRGB(200, 200, 200)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Position = UDim2.new(0, 5, 0, 2)

        local valueLabel = Instance.new("TextLabel", frame)
        valueLabel.Name = "ValueLabel"
        valueLabel.Size = UDim2.new(0.25, 0, 0.5, 0)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Font = self.font
        valueLabel.Position = UDim2.new(0.75, 0, 0, 2)
        valueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        valueLabel.TextSize = 14
        valueLabel.TextXAlignment = Enum.TextXAlignment.Right
        valueLabel.Text = tostring(initialValue or minValue)

        local sliderBar = Instance.new("Frame", frame)
        sliderBar.Name = "SliderBar"
        sliderBar.Size = UDim2.new(0.9, -10, 0, 10)
        sliderBar.Position = UDim2.new(0, 5, 0.6, 0)
        sliderBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        sliderBar.BorderSizePixel = 0
        sliderBar.ClipsDescendants = true

        local fill = Instance.new("Frame", sliderBar)
        fill.Name = "Fill"
        fill.Size = UDim2.new(0, 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
        fill.BorderSizePixel = 0

        local dragging = false
        local minVal = minValue or 0
        local maxVal = maxValue or 100
        local value = initialValue or minVal

        local function setValue(newVal)
            value = math.clamp(newVal, minVal, maxVal)
            local percent = (value - minVal) / (maxVal - minVal)
            fill.Size = UDim2.new(percent, 0, 1, 0)
            valueLabel.Text = string.format("%.2f", value)
            if callback then
                pcall(callback, value)
            end
        end

        setValue(value)

        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local relativeX = input.Position.X - sliderBar.AbsolutePosition.X
                local sliderWidth = sliderBar.AbsoluteSize.X
                local percent = math.clamp(relativeX / sliderWidth, 0, 1)
                setValue(minVal + percent * (maxVal - minVal))
            end
        end)

        sliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local relativeX = input.Position.X - sliderBar.AbsolutePosition.X
                local sliderWidth = sliderBar.AbsoluteSize.X
                local percent = math.clamp(relativeX / sliderWidth, 0, 1)
                setValue(minVal + percent * (maxVal - minVal))
            end
        end)

        return frame, setValue
    end

    return menu
end

return ui
