local HttpService = game:GetService("HttpService")

local RageUI = {}

-- Handle font setup
-- Loads font from GitHub raw URL, writes font file and font face configuration
function RageUI:SetupFont()
    local fontFileName = "smallest_pixel.ttf"
    local fontFaceName = "fontface.font"

    if not pcall(function() return readfile(fontFileName) end) then
        writefile(fontFileName, game:HttpGet("https://github.com/f1nobe7650/Nebula/raw/main/fs-tahoma-8px.ttf"))
    end

    -- Define font face data using standard Weight and Style for Roblox fonts
    local fontFaceData = {
        name = "SmallestPixel7",
        faces = {
            {
                name = "Regular",
                weight = Enum.FontWeight.Regular.Value,
                style = Enum.FontStyle.Normal.Name,
                assetId = getcustomasset(fontFileName)
            }
        }
    }

    if not pcall(function() return readfile(fontFaceName) end) then
        writefile(fontFaceName, HttpService:JSONEncode(fontFaceData))
    end

    self.font = Font.new(getcustomasset(fontFaceName), Enum.FontWeight.Light)

    return self.font
end


-- Create the main RageUI container Frame (ScreenGui)
function RageUI:CreateMainContainer()
    local ragebot = Instance.new("ScreenGui")
    ragebot.Name = "RageUI"
    ragebot.ResetOnSpawn = false
    ragebot.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- keep zindex sane

    -- Main Accent Frame
    local MainAccent = Instance.new("Frame", ragebot)
    MainAccent.Name = "MainAccent"
    MainAccent.AnchorPoint = Vector2.new(0.5, 0.5)
    MainAccent.Size = UDim2.new(0, 201, 0, 135)
    MainAccent.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainAccent.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
    MainAccent.BorderSizePixel = 0

    local MainAccent_UIStroke = Instance.new("UIStroke", MainAccent)
    MainAccent_UIStroke.Color = Color3.fromRGB(0, 0, 0)

    local secondmain = Instance.new("Frame", MainAccent)
    secondmain.Name = "SecondMain"
    secondmain.Size = UDim2.new(1, -2, 1, -2)
    secondmain.Position = UDim2.new(0, 1, 0, 1)
    secondmain.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
    secondmain.BorderSizePixel = 0

    -- Box main and nested frames to match your style
    local boxmain = Instance.new("Frame", secondmain)
    boxmain.Name = "BoxMain"
    boxmain.Size = UDim2.new(1, -8, 1, -24)
    boxmain.Position = UDim2.new(0, 4, 0, 20)
    boxmain.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    boxmain.BorderSizePixel = 0

    local boxmain_UIStroke = Instance.new("UIStroke", boxmain)
    boxmain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local secondboxmain = Instance.new("Frame", boxmain)
    secondboxmain.Name = "SecondBoxMain"
    secondboxmain.Size = UDim2.new(1, -10, 1, -10)
    secondboxmain.Position = UDim2.new(0, 5, 0, 5)
    secondboxmain.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
    secondboxmain.BorderSizePixel = 0

    local secondboxmain_UIStroke = Instance.new("UIStroke", secondboxmain)
    secondboxmain_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local holder = Instance.new("Frame", secondboxmain)
    holder.Name = "Holder"
    holder.Size = UDim2.new(1, -8, 1, -8)
    holder.Position = UDim2.new(0, 4, 0, 4)
    holder.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    holder.BorderSizePixel = 0

    local holder_UIStroke = Instance.new("UIStroke", holder)
    holder_UIStroke.Color = Color3.fromRGB(43, 43, 43)

    local accentstripe = Instance.new("Frame", holder)
    accentstripe.Name = "AccentStripe"
    accentstripe.Size = UDim2.new(1, -2, 0, 2)
    accentstripe.Position = UDim2.new(0, 1, 0, 1)
    accentstripe.BackgroundColor3 = Color3.fromRGB(74, 84, 122)
    accentstripe.BorderSizePixel = 0

    local holder_UIGradient = Instance.new("UIGradient", holder)
    holder_UIGradient.Rotation = -90
    holder_UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(103, 103, 103)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }

    -- Title label
    local Title = Instance.new("TextLabel", holder)
    Title.Name = "Title"
    Title.Size = UDim2.new(0, 200, 0, 50)
    Title.Position = UDim2.new(0, -8, 0, -45)
    Title.BackgroundTransparency = 1
    Title.Text = "biteme.club"
    Title.TextSize = 12
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextColor3 = Color3.fromRGB(140, 140, 140)
    Title.FontFace = self.font -- set your font
    Title.TextStrokeTransparency = 0
    Title.BorderSizePixel = 0

    self.MainAccent = MainAccent
    self.Holder = holder
    self.RageUI = ragebot

    return ragebot, holder
end


-- Create a Toggle control in a parent frame; returns the toggle Frame and a function to set state
-- Params: parent frame, initial state (bool), callback function(state)
function RageUI:CreateToggle(parent, initialState, callback)
    local toggleholder = Instance.new("Frame", parent)
    toggleholder.Name = "ToggleHolder"
    toggleholder.BorderSizePixel = 0
    toggleholder.BackgroundTransparency = 1
    toggleholder.Size = UDim2.new(0, 120, 0, 20)

    local toggleFrame = Instance.new("Frame", toggleholder)
    toggleFrame.Name = "ToggleFrame"
    toggleFrame.BorderSizePixel = 0
    toggleFrame.BackgroundColor3 = initialState and Color3.fromRGB(59,59,95) or Color3.fromRGB(44,44,44)
    toggleFrame.Size = UDim2.new(0, 20, 0, 20)
    toggleFrame.Position = UDim2.new(0, 0, 0, 0)

    local toggleInfo = Instance.new("TextLabel", toggleFrame)
    toggleInfo.Name = "Info"
    toggleInfo.Text = initialState and "Toggled On" or "Toggled Off"
    toggleInfo.TextSize = 12
    toggleInfo.FontFace = self.font
    toggleInfo.TextColor3 = Color3.fromRGB(173, 173, 173)
    toggleInfo.BackgroundTransparency = 1
    toggleInfo.BorderSizePixel = 0
    toggleInfo.Size = UDim2.new(1, 100, 1, 0)
    toggleInfo.Position = UDim2.new(1, 5, 0, 0)
    toggleInfo.TextXAlignment = Enum.TextXAlignment.Left

    local UIGradient = Instance.new("UIGradient", toggleFrame)
    UIGradient.Rotation = -90
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174,174,174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    }

    local toggled = initialState

    local function UpdateToggle(state)
        toggled = state
        if toggled then
            toggleFrame.BackgroundColor3 = Color3.fromRGB(59,59,95)
            toggleInfo.Text = "Toggled On"
        else
            toggleFrame.BackgroundColor3 = Color3.fromRGB(44,44,44)
            toggleInfo.Text = "Toggled Off"
        end
        if callback then
            callback(toggled)
        end
    end

    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            UpdateToggle(not toggled)
        end
    end)

    -- Return the toggle instance and function to set toggle programmatically
    return toggleholder, UpdateToggle
end


-- Create a Slider control in a parent frame
-- Params: parent frame, minValue, maxValue, initialValue, callback(value)
function RageUI:CreateSlider(parent, minVal, maxVal, initialVal, callback)
    local sliderHolder = Instance.new("Frame", parent)
    sliderHolder.Name = "SliderHolder"
    sliderHolder.Size = UDim2.new(1, 0, 0, 30)
    sliderHolder.BackgroundTransparency = 1
    sliderHolder.BorderSizePixel = 0

    local barBack = Instance.new("Frame", sliderHolder)
    barBack.Name = "BarBack"
    barBack.Size = UDim2.new(1, -40, 0, 10)
    barBack.Position = UDim2.new(0, 20, 0, 10)
    barBack.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
    barBack.BorderSizePixel = 0

    local bgGradient = Instance.new("UIGradient", barBack)
    bgGradient.Rotation = -90
    bgGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174,174,174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    }

    local sliderFill = Instance.new("Frame", barBack)
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new((initialVal - minVal)/(maxVal - minVal), 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(59, 59, 95)
    sliderFill.BorderSizePixel = 0

    local fillGradient = Instance.new("UIGradient", sliderFill)
    fillGradient.Rotation = -90
    fillGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(174,174,174)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
    }

    local infoLabel = Instance.new("TextLabel", sliderHolder)
    infoLabel.Name = "ValueInfo"
    infoLabel.Size = UDim2.new(0, 40, 1, 0)
    infoLabel.Position = UDim2.new(0, 0, 0, 0)
    infoLabel.BackgroundTransparency = 1
    infoLabel.TextSize = 12
    infoLabel.FontFace = self.font
    infoLabel.TextColor3 = Color3.fromRGB(173,173,173)
    infoLabel.BorderSizePixel = 0
    infoLabel.Text = tostring(initialVal)
    infoLabel.TextXAlignment = Enum.TextXAlignment.Left
    infoLabel.TextYAlignment = Enum.TextYAlignment.Center

    local dragging = false
    local currentValue = initialVal

    local function updateSlider(inputPosX)
        local relativeX = inputPosX - barBack.AbsolutePosition.X
        relativeX = math.clamp(relativeX, 0, barBack.AbsoluteSize.X)
        local percent = relativeX / barBack.AbsoluteSize.X
        local value = minVal + percent * (maxVal - minVal)
        value = math.clamp(value, minVal, maxVal)
        currentValue = value

        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        infoLabel.Text = string.format("%.2f", value)

        if callback then
            callback(value)
        end
    end

    barBack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input.Position.X)
        end
    end)

    barBack.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input.Position.X)
        end
    end)

    -- Programmatically set slider value function
    local function setValue(value)
        value = math.clamp(value, minVal, maxVal)
        currentValue = value
        local percent = (value - minVal) / (maxVal - minVal)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        infoLabel.Text = string.format("%.2f", value)
    end

    return sliderHolder, setValue
end


-- Initialize library (load font and create main container)
function RageUI:Init()
    self:SetupFont()
    local screenGui, holder = self:CreateMainContainer()
    return screenGui, holder
end


return RageUI
